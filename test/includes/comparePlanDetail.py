# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import numpy as np
import pandas as pd

filename = '../../data/comparePlanDetails.csv'
df_obj = pd.read_csv(filename)

df_obj.head()


class testMedicarePlanDetail():
  def setup_method(self, method):
    # self.driver = webdriver.Remote(command_executor='http://localhost:4444/wd/hub', desired_capabilities=DesiredCapabilities.FIREFOX)
    # self.driver = webdriver.Chrome(executable_path='../../driver/chromedriver')
    # self.driver = webdriver.Firefox()
    self.driver = webdriver.Chrome()
    print("start the browser...")
    self.vars = {}
  
  def teardown_method(self, method):

    self.driver.quit()
  
  def test_medicare(self):
    # Test name: medicare
    # Step # | name | target | value
    # 1 | open | / | 
    self.driver.get("https://sunmaker.medicare.healthinsurance.com")
    # 2 | setWindowSize | 1440x900 | 
    self.driver.set_window_size(1440, 900)
    # 3 | click | linkText=Census | 
    # self.driver.find_element(By.LINK_TEXT, "Census").click()
    # 4 | click | name=census.location.zip |                                              
    self.driver.implicitly_wait(60)
    self.driver.find_element(By.NAME, "census.location.zip").click()
    # 5 | type | name=census.location.zip | 30301
    self.driver.find_element(By.NAME, "census.location.zip").send_keys("30301")
    # 6 | click | xpath=//div[@id='__next']/div[2]/div/div/div[2]/div |
    self.driver.implicitly_wait(60)
    time.sleep(5)
    self.driver.find_element(By.XPATH, "//div[@id=\'__next\']/div[2]/div/div/div[2]/div").click()
    # 7 | click | xpath=//div[@id='__next']/div[2]/div/div/div[2]/div/div/form/div/div[2]/button | 
    self.driver.find_element(By.XPATH, "//div[@id=\'__next\']/div[2]/div/div/div[2]/div/div/form/div/div[2]/button").click()

    # 8 | click | linkText=See Plan Details | 
    self.driver.find_element(By.LINK_TEXT, "See Plan Details").click()
    self.driver.implicitly_wait(60) 
    # 9 | verifyElementPresent | linkText=« Back to Medicare Advantage Plans | 
    elements = self.driver.find_elements(By.LINK_TEXT, "« Back to Medicare Advantage Plans")
    assert len(elements) > 0
    sectionCount = self.driver.find_elements(By.XPATH, "//div[@id=\'__next\']/div[3]/div[5]/div/div")
    print("sectionCount is", len(sectionCount))

    count= len(sectionCount)
    for i in range(count):
      j = str(i+1)
      df_obj.iloc[i, 4] = self.driver.find_element(By.XPATH, "//div[@id=\'__next\']/div[3]/div[5]/div/div[" + j + "]/div/div").text
      df_obj.iloc[i, 5] = self.driver.find_element(By.XPATH, "//div[@id=\'__next\']/div[3]/div[5]/div/div[" + j + "]/div/div[2]/strong").text

    df_obj.to_csv(filename)



    # # 10 | click | linkText=Enroll |
    # self.driver.find_element(By.LINK_TEXT, "Enroll").click()
    # # 11 | mouseOver | linkText=Enroll |
    # element = self.driver.find_element(By.LINK_TEXT, "Enroll")
    # actions = ActionChains(self.driver)
    # actions.move_to_element(element).perform()
    # # 12 | mouseOut | linkText=Enroll |
    # element = self.driver.find_element(By.CSS_SELECTOR, "body")
    # actions = ActionChains(self.driver)
    # actions.move_to_element(element, 0, 0).perform()
    # # 13 | verifyElementPresent | css=.modal-body |
    # elements = self.driver.find_elements(By.CSS_SELECTOR, ".modal-body")
    # assert len(elements) > 0
    # # 14 | click | css=.modal |
    # self.driver.find_element(By.CSS_SELECTOR, ".modal").click()

 
 
 
 
 
